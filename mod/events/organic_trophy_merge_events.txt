namespace = organic_trophy_merge

country_event = {
	id = organic_trophy_merge.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_owned_pop_species = {
			count_species_pop = { count > 0 }
			has_living_standard = {
				type = living_standard_organic_trophy_merge
				country = root
			}
		}
	}
	immediate = {
		ordered_owned_pop_species = {
			limit = {
				NOT = { is_same_species = root.owner_species }
				home_planet = { is_planet = root.owner_species.home_planet }
				is_robotic = no
			}
			order_by = trigger:num_trait_points
			position = 0
			save_event_target_as = primary_organic_trophy_species
		}
		every_owned_planet = {
			limit = {
				any_owned_species = {
					has_living_standard = {
						type = living_standard_organic_trophy_merge
						country = root
					}
				}
			}
			random_list = {
				1 = { # 3 pops
					set_variable = {
						which = organic_trophy_merge_maximum
						value = 3
					}
				}
				1 = { # 6 pops
					set_variable = {
						which = organic_trophy_merge_maximum
						value = 6
					}
				}
				1 = { # 12 pops
					set_variable = {
						which = organic_trophy_merge_maximum
						value = 12
					}
				}
			}
			while = {
				count = organic_trophy_merge_maximum
				limit = {
					check_variable = {
						which = organic_trophy_merge_maximum
						value > 0
					}
					any_owned_pop = {
						has_living_standard = {
							type = living_standard_organic_trophy_merge
							country = root
						}
					}
				}
				# similar to assimilation, this prefers to process as many of the same species as possible before re-randomizing
				random_owned_pop = {
					limit = {
						has_living_standard = {
							type = living_standard_organic_trophy_merge
							country = root
						}
					}
					species = { save_event_target_as = merging_species }
					change_species = event_target:primary_organic_trophy_species
					set_living_standard = {
						type = living_standard_organic_trophy
						country = owner
					}
					planet = {
						change_variable = {
							which = organic_trophy_merge_maximum
							value = -1
						}
						while = {
							limit = {
								check_variable = {
									which = organic_trophy_merge_maximum
									value > 0
								}
								any_owned_pop = { is_exact_same_species = event_target:merging_species }
							}
							random_owned_pop = {
								limit = { is_exact_same_species = event_target:merging_species }
								change_species = event_target:primary_organic_trophy_species
								set_living_standard = {
									type = living_standard_organic_trophy
									country = owner
								}
								planet = {
									change_variable = {
										which = organic_trophy_merge_maximum
										value = -1
									}
								}
							}
						}
					}
				}
			}
			clear_variable = organic_trophy_merge_maximum
		}
	}
}
